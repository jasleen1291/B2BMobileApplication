package com.jc.b2b;

import java.util.ArrayList;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.app.ProgressDialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.Menu;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ListView;

import com.jc.b2b.utils.B2BUtils;
import com.jc.b2b.utils.ChildItem;
import com.jc.b2b.utils.Items;

public class CustomerArea extends FragmentActivity {
ListView lv;
android.support.v4.app.FragmentTransaction fragmentTransaction;
android.support.v4.app.FragmentManager fm;
ArrayList<ChildItem> ab=new ArrayList<ChildItem>();
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_customer_area);

		fm = getSupportFragmentManager();
		fragmentTransaction = fm.beginTransaction();
		ab.add(new ChildItem(new CustomerHome(), "Search Item"));
		ab.add(new ChildItem(new MyShoppingCart(), "Shopping Cart"));
		ab.add(new ChildItem(new MySavedItems(),"My Saved Items"));
		lv=(ListView)findViewById(R.id.list);
		lv.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> arg0, View arg1, int arg2,
					long arg3) {
				// TODO Auto-generated method stub
				Fragment a = ab.get(arg2).getA();
		fragmentTransaction = fm.beginTransaction();
		fragmentTransaction.replace(R.id.myfragment, a,  ab.get(arg2).getB());
		
		fragmentTransaction.commit();
			}
		});
	
		new FetchShopInfo().execute("");
	}
	public class FetchShopInfo extends AsyncTask<String, String, String> {
		ProgressDialog progress;
		public FetchShopInfo() {
			super();
			// TODO Auto-generated constructor stub
		}

		@Override
		protected void onPreExecute() {
			progress=new ProgressDialog(CustomerArea.this);
			progress.setTitle("Fetching Shop Info Please wait...");
			progress.show();
			super.onPreExecute();
		}

		@Override
		protected void onPostExecute(String result) {
			if (progress.isShowing()) {
				progress.dismiss();
			}
			CustomerHome myFragment = new CustomerHome();
			fragmentTransaction.add(R.id.myfragment, myFragment);
			fragmentTransaction.commit();
			super.onPostExecute(result);
		}

		@Override
		protected String doInBackground(String... params) {
			try
			{
			
					ArrayList<Items> available=new ArrayList<Items>();
					JSONArray ard2 = B2BUtils.getJSOnArr("http://10.0.2.2:8080/B2B/category_item_retail.jsp?category=0");
					for (int i = 0; i < ard2.length(); i++) {
						JSONObject child = ard2.getJSONObject(i);
						
						Intent ic = new Intent(getApplicationContext(),
								FetchImage.class);
						ic.putExtra("url", "http://10.0.2.2:8080/B2B/images/"
								+ child.getString("imagepath"));
						ic.putExtra("imagename", child.getString("itemname"));
						startService(ic);
						Items current=(new Items(child.getString("categoryid"),
								child.getString("status"), child
										.getString("imagepath"), child
										.getString("itemname"), child
										.getString("unit_of_measurement"),
								child.getString("qtyperunit"), child
										.getString("owner"), child
										.getString("longdesciption"), child
										.getString("iditem"), child
										.getString("sp"), child
										.getString("unitcost"), child
										.getString("min_order"), child
										.getString("item_shopid"), child
										.getString("discount"), child
										.getString("qtyonorder"), null,
								null, null, child.getString("qtyperunit")));
						available.add(current);
						
					}
					//shop=new Shop(ob.getString("status"),ob.getString("description"), ob.getString("categoriesallowed"), ob.getString("ShopName"), ob.getString("expirydate"), ob.getString("idshop"), ob.getString("paymentemail"), children, available, items, mycategories);
					//B2BUtils.shop=shop;
					//Log.d("d", B2BUtils.shop.getImgs().size()+"");
					//el.setClickable(true);
				} catch (JSONException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				return null;
			}
			
		

	}
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.customer_area, menu);
		return true;
	}
	public static int calculateInSampleSize(
            BitmapFactory.Options options, int reqWidth, int reqHeight) {
    // Raw height and width of image
    final int height = options.outHeight;
    final int width = options.outWidth;
    int inSampleSize = 1;

    if (height > reqHeight || width > reqWidth) {

        // Calculate ratios of height and width to requested height and width
        final int heightRatio = Math.round((float) height / (float) reqHeight);
        final int widthRatio = Math.round((float) width / (float) reqWidth);

        // Choose the smallest ratio as inSampleSize value, this will guarantee
        // a final image with both dimensions larger than or equal to the
        // requested height and width.
        inSampleSize = heightRatio < widthRatio ? heightRatio : widthRatio;
    }

    return inSampleSize;
}
	public static Bitmap decodeSampledBitmapFromResource(String path, 
	        int reqWidth, int reqHeight) {

	    // First decode with inJustDecodeBounds=true to check dimensions
	    final BitmapFactory.Options options = new BitmapFactory.Options();
	    options.inJustDecodeBounds = true;
	    BitmapFactory.decodeFile(path, options);

	    // Calculate inSampleSize
	    options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);

	    // Decode bitmap with inSampleSize set
	    options.inJustDecodeBounds = false;
	    return BitmapFactory.decodeFile(path, options);
	}

	@Override
	public void onBackPressed() {
		// TODO Auto-generated method stub
		super.onBackPressed();
	}

	private BroadcastReceiver mMessageReceiver = new BroadcastReceiver() {
		@Override
		public void onReceive(Context context, Intent intent) {
			// Extract data included in the Intent
			String message = intent.getStringExtra("imagepath");
			String picture = intent.getStringExtra("picture");
			
				if (B2BUtils.imgs.containsKey(picture)) {
					B2BUtils.imgs.getImgs().putAll(items);
				} else {
					
					B2BUtils.imgs.put(picture, decodeSampledBitmapFromResource(message, 100, 100));
					//B2BUtils.shop.getImgs().putAll(items);
					if(B2BUtils.shop!=null)
					{
						Log.d("null", "hell");
						B2BUtils.imgs.putAll(items);
					}
					else
					{
						Log.d("wtf", "wf");
					}
				}
			}
			
			//Log.d("Imagereceived", message);
		};
	

	@Override
	public void onResume() {
		super.onResume();

		// Register mMessageReceiver to receive messages.
		registerReceiver(
				mMessageReceiver, new IntentFilter(B2BUtils.IMAGE_INTENT));
	}

	
	@Override
	protected void onPause() {
		unregisterReceiver(mMessageReceiver);
		super.onPause();
	}
}
